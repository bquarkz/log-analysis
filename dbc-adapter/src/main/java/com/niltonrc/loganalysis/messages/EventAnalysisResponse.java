package com.niltonrc.loganalysis.messages;

import com.niltonrc.loganalysis.dtos.AnalysisReportDto;

import java.util.Optional;

public class EventAnalysisResponse
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constants
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Special Fields And Injections
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Fields
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private final boolean isOk;
    private final AnalysisReportDto report;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public EventAnalysisResponse()
    {
        this( false, null );
    }

    public EventAnalysisResponse( boolean isOk, AnalysisReportDto report )
    {
        this.isOk = isOk;
        this.report = report;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Factories
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Getters And Setters
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public boolean isOk()
    {
        return isOk;
    }

    public Optional< AnalysisReportDto > getReport()
    {
        return isOk() ? Optional.empty() : Optional.ofNullable( report );
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Methods
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public String toString()
    {
        return "EventAnalysisResponse{" +
                "isOk=" + isOk +
                ", report=" + report +
                '}';
    }


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Inner Classes And Patterns
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
