package com.niltonrc.loganalysis.utils;

import org.slf4j.Logger;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Collections;
import java.util.List;
import java.util.function.Consumer;

public final class DBUtils
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constants
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Special Fields And Injections
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Fields
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Factories
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Getters And Setters
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Methods
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public static String prepareQuestionMarks( int size )
    {
        return String.join( ",", Collections.nCopies( size, "?" ) );
    }

    public static < E > long doBatch(
            final Logger logger,
            final DataSource dataSource,
            final String sql,
            final long batchSize,
            final List< E > elements,
            final Consumer< E > peek,
            final SQLStatementCompose< E > statement )
    {
        try( Connection connection = dataSource.getConnection() )
        {
            final boolean autoCommit = connection.getAutoCommit();
            connection.setAutoCommit( false );

            try( PreparedStatement ps = connection.prepareStatement( sql ) )
            {
                long counter = 0;
                for( E e : elements )
                {
                    peek.accept( e );
                    statement.prepare( ps, e );
                    ps.addBatch();

                    if( ( ++counter % batchSize == 0 ) || ( counter == elements.size() ) )
                    {
                        ps.executeBatch();
                        ps.clearBatch();
                        if( logger != null )
                        {
                            logger.debug( "sql batch: " + counter + "/" + batchSize + " of: " + elements.size() );
                        }
                    }
                }
                connection.commit();
                return counter;
            }
            finally
            {
                connection.setAutoCommit( autoCommit );
            }
        }
        catch( SQLException ex )
        {
            throw new RuntimeException( ex );
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Inner Classes And Patterns
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    @FunctionalInterface
    public interface SQLStatementCompose< E >
    {
        void prepare( PreparedStatement ps, E element ) throws SQLException;
    }
}
