package com.niltonrc.loganalysis.repository;

import com.niltonrc.loganalysis.constants.DBConstants;
import com.niltonrc.loganalysis.contract.IEventRepository;
import com.niltonrc.loganalysis.entities.event.EventEntity;
import com.niltonrc.loganalysis.utils.DBUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

@Repository
public class EventRepository
    implements IEventRepository
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constants
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private static final Logger LOGGER = LoggerFactory.getLogger( EventRepository.class );

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Special Fields And Injections
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private final DataSource dataSource;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Fields
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    @Autowired
    protected EventRepository( DataSource dataSource )
    {
        this.dataSource = dataSource;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Factories
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Getters And Setters
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public Logger getLogger()
    {
        return LOGGER;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Methods
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private void eventEntityPeek( EventEntity entity )
    {
        getLogger().debug( entity.toString() );
    }

    private void eventEntityMapper( PreparedStatement ps, EventEntity entity ) throws SQLException
    {
        int counter = 1;
        ps.setString( counter++, entity.getId() );
        ps.setBoolean( counter++, entity.isAlert() );
        ps.setInt( counter++, entity.getDuration() );
        ps.setString( counter++, entity.getType() );
        ps.setString( counter++, entity.getHost() );
    }

    @Override
    public long batchInsert( List< EventEntity > events )
    {
        final String sql = " INSERT INTO DBO.EVENTS ( id, alert, duration, type, host ) "
                + " VALUES ( " + DBUtils.prepareQuestionMarks( 5 ) + " ); "
                ;
        return DBUtils.doBatch( getLogger(), dataSource,
                sql, DBConstants.DB_BATCH_SIZE, events,
                this::eventEntityPeek, this::eventEntityMapper );
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Inner Classes And Patterns
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
