package com.niltonrc.loganalysis.service.event;

import com.niltonrc.loganalysis.event.Entry;
import com.niltonrc.loganalysis.event.Event;
import com.niltonrc.loganalysis.event.EventManager;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.stream.Collectors;

public class EventProcessor implements EventBundle, Callable< EventBundle >
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constants
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Special Fields And Injections
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Fields
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private long invalidEntries;
    private final EventConverter eventConverter;
    private final List< EventManager > completeEventManager;
    private final Map< String, EventManager > remainderEventManager;
    private final List< String > linesToProcess;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public EventProcessor( EventConverter eventConverter, List< String > linesToProcess )
    {
        this.eventConverter = eventConverter;
        this.linesToProcess = linesToProcess;
        this.completeEventManager = new ArrayList<>();
        this.remainderEventManager = new HashMap<>();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Factories
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Getters And Setters
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Methods
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    @Override
    public EventBundle call() throws Exception
    {
        final List< Entry > entriesToProcess = eventConverter.mapToEntries( linesToProcess );
        this.invalidEntries = linesToProcess.size() - entriesToProcess.size();
        for( Entry entry : entriesToProcess )
        {
            final EventManager eventManager = remainderEventManager.get( entry.getId() );
            if( eventManager == null )
            {
                remainderEventManager.put( entry.getId(), new EventManager( entry ) );
            }
            else
            {
                if( eventManager.merge( entry ) )
                {
                    completeEventManager.add( eventManager );
                    remainderEventManager.remove( entry.getId() );
                }
            }
        }

        return this;
    }

    @Override
    public long getNumberOfInvalidEntries()
    {
        return invalidEntries;
    }

    @Override
    public List< Event > getComplete()
    {
        return completeEventManager
                .stream()
                .map( EventManager::getEvent )
                .collect( Collectors.toList() );
    }

    @Override
    public Map< String, EventManager > getRemainder()
    {
        return remainderEventManager;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Inner Classes And Patterns
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
