package com.niltonrc.loganalysis.utils;

import com.niltonrc.loganalysis.constants.GeneralConstants;

import java.util.Optional;
import java.util.concurrent.BlockingDeque;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.TimeUnit;

public class EventQueue< TYPE >
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constants
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Special Fields And Injections
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Fields
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private final BlockingDeque< TYPE > deque;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public EventQueue()
    {
        this.deque = new LinkedBlockingDeque<>();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Factories
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Getters And Setters
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Methods
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public boolean top( TYPE element )
    {
        return deque.offerFirst( element );
    }

    public Optional< TYPE > tail()
    {
        try
        {
            return Optional.ofNullable( deque.pollLast( GeneralConstants.TIME_TO_WAIT_IN_MS, TimeUnit.MILLISECONDS ) );
        }
        catch( InterruptedException ex )
        {
            return Optional.empty();
        }
    }

    public int size()
    {
        return deque.size();
    }

    public boolean isEmpty()
    {
        return deque.isEmpty();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Inner Classes And Patterns
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
